import csv
from copy import deepcopy  # noqa: F401
from pathlib import Path

from django.conf import settings

from api.models import (  # noqa: F401
    BenthicAttribute,
    Classifier,
    GrowthForm,
    Label,
    LabelMapping,
)


def _get_id(val):
    id = str(val)
    if id == "" or id == "NA":
        return None
    return id


def run():
    # labels_csv = Path(settings.BASE_DIR, "data", "initial_label_pop.csv")
    # initial_classifier = Classifier.objects.get(name="initial pyspacer classifier")
    # classifier_labels = set()
    #
    # with open(labels_csv) as csvfile:
    #     reader = csv.DictReader(csvfile)
    #     for row in reader:
    #         ba_id = _get_id(row["MermaidBaID"])
    #         gf_id = _get_id(row["MermaidGfID"])
    #         cn_id = _get_id(row["CoralNetID"])
    #         cn_label = row["CoralNetName"]
    #         classifier_label = (
    #             row["CoralFocus3Label"] if row["CoralFocus3Label"].lower() != "remove" else None
    #         )
    #         if classifier_label:
    #             cl_ba, cl_gf = (classifier_label.split(" - ") + [None])[:2]
    #             classifier_labels.add((cl_ba, cl_gf))
    #
    #         label, created = Label.objects.get_or_create(
    #             benthic_attribute_id=ba_id, growth_form_id=gf_id
    #         )
    #
    #         label_mapping, created = LabelMapping.objects.get_or_create(
    #             label=label,
    #             provider="CoralNet",
    #             provider_id=cn_id,
    #             provider_label=cn_label,
    #         )
    #
    # for cl_ba, cl_gf in classifier_labels:
    #     ba = BenthicAttribute.objects.get(name=cl_ba)
    #     gf = GrowthForm.objects.get_or_none(name=cl_gf)
    #     cl, created = Label.objects.get_or_create(benthic_attribute=ba, growth_form=gf)
    #     initial_classifier.labels.add(cl)
    #
    # print(f"classifier labels created ({initial_classifier.labels.count()})")
    # for label in initial_classifier.labels.order_by("benthic_attribute__name", "growth_form__name"):
    #     print(label.pk, label.name)

    # replace label ids generated by above with ids exported from prod db
    labels_csv = Path(
        settings.BASE_DIR,
        "data",
        "CoralNetMermaidMatchedCoralFocusModel2Reassign_master - labels.csv",
    )
    initial_classifier = Classifier.objects.get(name="initial pyspacer classifier")
    with open(labels_csv, newline="") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            label_id = _get_id(row["label id"])
            ba_id = _get_id(row["Benthic attribute id"])
            gf_id = _get_id(row["Growth form id"])
            if label_id and ba_id:
                existing_label = Label.objects.get_or_none(
                    benthic_attribute_id=ba_id, growth_form_id=gf_id
                )
                new_label = Label(id=label_id, benthic_attribute_id=ba_id, growth_form_id=gf_id)
                new_label_mappings = []
                new_classifier_labels = []
                if existing_label:
                    label_mappings = LabelMapping.objects.filter(
                        provider="CoralNet", label=existing_label
                    )
                    for existing_label_mapping in label_mappings:
                        new_label_mapping = deepcopy(existing_label_mapping)
                        new_label_mapping.pk = None
                        new_label_mapping.label = new_label
                        existing_label_mapping.delete()
                        new_label_mappings.append(new_label_mapping)
                    if existing_label in initial_classifier.labels.all():
                        initial_classifier.labels.remove(existing_label)
                        new_classifier_labels.append(new_label)
                    existing_label.delete()
                    new_label.save()
                    for new_label_mapping in new_label_mappings:
                        new_label_mapping.save()
                    for label in new_classifier_labels:
                        initial_classifier.labels.add(label)
