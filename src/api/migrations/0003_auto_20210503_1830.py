# Generated by Django 2.2.12 on 2021-05-03 18:30
import datetime

from django.db import migrations

from api.models import (
    BenthicAttribute,
    CollectRecord,
    FishFamily,
    FishGenus,
    FishSpecies,
    Management,
    Project,
    ProjectProfile,
    Site,
)


def _generate_sql(table, pk, timestamp, project=None, profile=None):
    project_col_sql = ""
    project_sql = ""
    profile_col_sql = ""
    profile_sql = ""
    if project:
        project_col_sql = '"project_id",'
        project_sql = f"'{project}'::uuid,"

    if profile:
        profile_col_sql = '"profile_id",'
        profile_sql = f"'{profile}'::uuid,"

    return f"""
        INSERT into revision(
            "table_name",
            "record_id",
            {project_col_sql}
            {profile_col_sql}
            "revision_num",
            "updated_on",
            "deleted"
        )
        VALUES (
            '{table}',
            '{pk}'::uuid,
            {project_sql}
            {profile_sql}
            nextval('revision_seq_num'),
            '{timestamp}'::timestamp,
            false
        );
    """


def backfill():
    timestamp = datetime.datetime.now()
    sqls = []
    sqls += [
        _generate_sql(
            "api_collectrecord",
            str(rec.pk),
            timestamp,
            project=str(rec.project_id),
            profile=str(rec.profile_id),
        )
        for rec in CollectRecord.objects.all()
    ]

    sqls += [
        _generate_sql(
            "site",
            str(rec.pk),
            timestamp,
            project=str(rec.project_id)
        )
        for rec in Site.objects.all()
    ]

    sqls += [
        _generate_sql(
            "management",
            str(rec.pk),
            timestamp,
            project=str(rec.project_id)
        )
        for rec in Management.objects.all()
    ]

    sqls += [
        _generate_sql(
            "project",
            str(rec.pk),
            timestamp,
            project=str(rec.pk)
        )
        for rec in Project.objects.all()
    ]

    sqls += [
        _generate_sql(
            "project_profile",
            str(rec.pk),
            timestamp,
            project=str(rec.project_id)
        )
        for rec in ProjectProfile.objects.all()
    ]

    sqls += [
        _generate_sql(
            "fish_family",
            str(rec.pk),
            timestamp,
        )
        for rec in FishFamily.objects.all()
    ]

    sqls += [
        _generate_sql(
            "fish_genus",
            str(rec.pk),
            timestamp,
        )
        for rec in FishGenus.objects.all()
    ]

    sqls += [
        _generate_sql(
            "fish_species",
            str(rec.pk),
            timestamp,
        )
        for rec in FishSpecies.objects.all()
    ]

    sqls += [
        _generate_sql(
            "benthic_attribute",
            str(rec.pk),
            timestamp,
        )
        for rec in BenthicAttribute.objects.all()
    ]

    return "".join(sqls)


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0002_recordrevision"),
    ]

    operations = [
        # migrations.RunSQL(backfill(), "")
    ]
