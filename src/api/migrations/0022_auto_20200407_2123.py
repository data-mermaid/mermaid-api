# Generated by Django 2.2.9 on 2020-04-07 21:23

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid
from ..models.view_models import *


drop_fa_view = "DROP VIEW IF EXISTS public.vw_fish_attributes CASCADE;"
drop_se_view = "DROP VIEW IF EXISTS public.vw_sample_events CASCADE;"
drop_fb_obs_view = "DROP VIEW IF EXISTS public.vw_beltfish_obs CASCADE;"
drop_fb_su_view = "DROP VIEW IF EXISTS public.vw_beltfish_su CASCADE;"
drop_fb_se_view = "DROP VIEW IF EXISTS public.vw_beltfish_se;"
drop_bp_obs_view = "DROP VIEW IF EXISTS public.vw_benthicpit_obs CASCADE;"
drop_bp_su_view = "DROP VIEW IF EXISTS public.vw_benthicpit_su CASCADE;"
drop_bp_se_view = "DROP VIEW IF EXISTS public.vw_benthicpit_se;"


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0021_auto_20200407_2000'),
    ]

    operations = [
        migrations.CreateModel(
            name='BenthicPITObsView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project_id', models.UUIDField()),
                ('project_name', models.CharField(max_length=255)),
                ('project_status', models.PositiveSmallIntegerField(choices=[(90, 'open'), (80, 'test'), (10, 'locked')], default=90)),
                ('project_notes', models.TextField(blank=True)),
                ('contact_link', models.CharField(max_length=255)),
                ('tags', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('site_id', models.UUIDField()),
                ('site_name', models.CharField(max_length=255)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('site_notes', models.TextField(blank=True)),
                ('country_id', models.UUIDField()),
                ('country_name', models.CharField(max_length=50)),
                ('reef_type', models.CharField(max_length=50)),
                ('reef_zone', models.CharField(max_length=50)),
                ('reef_exposure', models.CharField(max_length=50)),
                ('management_id', models.UUIDField()),
                ('management_name', models.CharField(max_length=255)),
                ('management_name_secondary', models.CharField(max_length=255)),
                ('management_est_year', models.PositiveSmallIntegerField()),
                ('management_size', models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True, verbose_name='Size (ha)')),
                ('management_parties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('management_compliance', models.CharField(max_length=100)),
                ('management_rules', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('management_notes', models.TextField(blank=True)),
                ('sample_date', models.DateField()),
                ('current_name', models.CharField(max_length=50)),
                ('tide_name', models.CharField(max_length=50)),
                ('visibility_name', models.CharField(max_length=50)),
                ('sample_event_id', models.UUIDField()),
                ('sample_event_notes', models.TextField(blank=True)),
                ('sample_unit_id', models.UUIDField()),
                ('sample_time', models.TimeField()),
                ('observers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('transect_number', models.PositiveSmallIntegerField()),
                ('label', models.CharField(blank=True, max_length=50)),
                ('transect_len_surveyed', models.PositiveSmallIntegerField(verbose_name='transect length surveyed (m)')),
                ('depth', models.DecimalField(decimal_places=1, max_digits=3, verbose_name='depth (m)')),
                ('reef_slope', models.CharField(max_length=50)),
                ('interval_size', models.DecimalField(decimal_places=2, default=0.5, max_digits=4, verbose_name='interval size (m)')),
                ('interval_start', models.DecimalField(decimal_places=2, default=0.5, max_digits=4, verbose_name='interval start (m)')),
                ('interval', models.DecimalField(decimal_places=2, max_digits=7)),
                ('benthic_category', models.CharField(max_length=100)),
                ('benthic_attribute', models.CharField(max_length=100)),
                ('growth_form', models.CharField(max_length=100)),
                ('observation_notes', models.TextField(blank=True)),
                ('data_policy_benthicpit', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'vw_benthicpit_obs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BenthicPITSEView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project_id', models.UUIDField()),
                ('project_name', models.CharField(max_length=255)),
                ('project_status', models.PositiveSmallIntegerField(choices=[(90, 'open'), (80, 'test'), (10, 'locked')], default=90)),
                ('project_notes', models.TextField(blank=True)),
                ('contact_link', models.CharField(max_length=255)),
                ('tags', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('site_id', models.UUIDField()),
                ('site_name', models.CharField(max_length=255)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('site_notes', models.TextField(blank=True)),
                ('country_id', models.UUIDField()),
                ('country_name', models.CharField(max_length=50)),
                ('reef_type', models.CharField(max_length=50)),
                ('reef_zone', models.CharField(max_length=50)),
                ('reef_exposure', models.CharField(max_length=50)),
                ('management_id', models.UUIDField()),
                ('management_name', models.CharField(max_length=255)),
                ('management_name_secondary', models.CharField(max_length=255)),
                ('management_est_year', models.PositiveSmallIntegerField()),
                ('management_size', models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True, verbose_name='Size (ha)')),
                ('management_parties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('management_compliance', models.CharField(max_length=100)),
                ('management_rules', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('management_notes', models.TextField(blank=True)),
                ('sample_date', models.DateField()),
                ('current_name', models.CharField(max_length=50)),
                ('tide_name', models.CharField(max_length=50)),
                ('visibility_name', models.CharField(max_length=50)),
                ('sample_unit_count', models.PositiveSmallIntegerField()),
                ('depth_avg', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='depth (m)')),
                ('percent_cover_by_benthic_category_avg', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('data_policy_benthicpit', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'vw_benthicpit_se',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BenthicPITSUView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project_id', models.UUIDField()),
                ('project_name', models.CharField(max_length=255)),
                ('project_status', models.PositiveSmallIntegerField(choices=[(90, 'open'), (80, 'test'), (10, 'locked')], default=90)),
                ('project_notes', models.TextField(blank=True)),
                ('contact_link', models.CharField(max_length=255)),
                ('tags', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('site_id', models.UUIDField()),
                ('site_name', models.CharField(max_length=255)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('site_notes', models.TextField(blank=True)),
                ('country_id', models.UUIDField()),
                ('country_name', models.CharField(max_length=50)),
                ('reef_type', models.CharField(max_length=50)),
                ('reef_zone', models.CharField(max_length=50)),
                ('reef_exposure', models.CharField(max_length=50)),
                ('management_id', models.UUIDField()),
                ('management_name', models.CharField(max_length=255)),
                ('management_name_secondary', models.CharField(max_length=255)),
                ('management_est_year', models.PositiveSmallIntegerField()),
                ('management_size', models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True, verbose_name='Size (ha)')),
                ('management_parties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('management_compliance', models.CharField(max_length=100)),
                ('management_rules', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('management_notes', models.TextField(blank=True)),
                ('sample_date', models.DateField()),
                ('current_name', models.CharField(max_length=50)),
                ('tide_name', models.CharField(max_length=50)),
                ('visibility_name', models.CharField(max_length=50)),
                ('observers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('transect_number', models.PositiveSmallIntegerField()),
                ('transect_len_surveyed', models.PositiveSmallIntegerField(verbose_name='transect length surveyed (m)')),
                ('depth', models.DecimalField(decimal_places=1, max_digits=3, verbose_name='depth (m)')),
                ('reef_slope', models.CharField(max_length=50)),
                ('interval_size', models.DecimalField(decimal_places=2, default=0.5, max_digits=4, verbose_name='interval size (m)')),
                ('interval_start', models.DecimalField(decimal_places=2, default=0.5, max_digits=4, verbose_name='interval start (m)')),
                ('percent_cover_by_benthic_category', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('data_policy_benthicpit', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'vw_benthicpit_su',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SampleEventViewModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'vw_sample_events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FishGrouping',
            fields=[
                ('fishattribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.FishAttribute')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
                'ordering': ('name',),
                'db_table': 'fish_grouping',
            },
            bases=('api.fishattribute',),
        ),
        migrations.CreateModel(
            name='FishGroupingRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grouping_attribute',
                                   to='api.FishAttribute')),
                ('grouping',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_grouping',
                                   to='api.FishGrouping')),
            ],
        ),
        migrations.RunSQL(drop_fa_view, FishAttributeView.sql),
        migrations.RunSQL(FishAttributeView.sql, drop_fa_view),
        migrations.RunSQL(SampleEventViewModel.sql, drop_se_view),
        migrations.RunSQL(BeltFishObsView.sql, drop_fb_obs_view),
        migrations.RunSQL(BeltFishSUView.sql, drop_fb_su_view),
        migrations.RunSQL(BeltFishSEView.sql, drop_fb_se_view),
        migrations.RunSQL(drop_bp_obs_view, BenthicPITObsView.sql),
        migrations.RunSQL(BenthicPITObsView.sql, drop_bp_obs_view),
        migrations.RunSQL(BenthicPITSUView.sql, drop_bp_su_view),
        migrations.RunSQL(BenthicPITSEView.sql, drop_bp_se_view),
    ]
