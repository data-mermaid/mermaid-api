# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-04-25 16:21
from __future__ import unicode_literals

import api.models.mermaid
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import rest_framework.utils.encoders
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('client_id', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'applications',
            },
        ),
        migrations.CreateModel(
            name='AppVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application', models.CharField(max_length=25, unique=True)),
                ('version', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='ArchivedRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('project_pk', models.UUIDField(blank=True, db_index=True, null=True)),
                ('record_pk', models.UUIDField(blank=True, db_index=True, null=True)),
                ('record', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('user_id', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'authuser',
            },
        ),
        migrations.CreateModel(
            name='BeltTransectWidth',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('val', models.PositiveSmallIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BenthicAttribute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(90, 'superuser approved'), (10, 'proposed')], default=10)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'benthic_attribute',
            },
        ),
        migrations.CreateModel(
            name='BenthicLifeHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'benthic_lifehistory',
                'verbose_name_plural': 'benthic life histories',
            },
        ),
        migrations.CreateModel(
            name='BenthicTransect',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('len_surveyed', models.PositiveSmallIntegerField(verbose_name='transect length surveyed (m)')),
                ('number', models.PositiveSmallIntegerField(default=1)),
                ('label', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'db_table': 'transect_benthic',
            },
        ),
        migrations.CreateModel(
            name='CollectRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, encoder=rest_framework.utils.encoders.JSONEncoder, null=True)),
                ('validations', django.contrib.postgres.fields.jsonb.JSONField(blank=True, encoder=rest_framework.utils.encoders.JSONEncoder, null=True)),
                ('stage', models.PositiveIntegerField(blank=True, choices=[(3, 'Saving'), (5, 'Saved'), (10, 'Validating'), (15, 'Validated'), (20, 'Submitting'), (25, 'Submitted')], null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('iso', models.CharField(max_length=2)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'country',
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='Current',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('val', models.PositiveSmallIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FishAttribute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(90, 'superuser approved'), (10, 'proposed')], default=10)),
            ],
            options={
                'db_table': 'fish_attribute',
            },
        ),
        migrations.CreateModel(
            name='FishBeltTransect',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('len_surveyed', models.PositiveSmallIntegerField(verbose_name='transect length surveyed (m)')),
                ('number', models.PositiveSmallIntegerField(default=1)),
                ('label', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'db_table': 'transect_belt_fish',
                'verbose_name': 'fish belt transect',
            },
        ),
        migrations.CreateModel(
            name='FishGroupFunction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'fish_group_function',
                'verbose_name': 'fish functional group',
            },
        ),
        migrations.CreateModel(
            name='FishGroupSize',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'fish_group_size',
                'verbose_name': 'fish group size',
            },
        ),
        migrations.CreateModel(
            name='FishGroupTrophic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'fish_group_trophic',
                'verbose_name': 'fish trophic group',
            },
        ),
        migrations.CreateModel(
            name='FishSize',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('val', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FishSizeBin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('val', models.PositiveSmallIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GrowthForm',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'growth_form',
                'verbose_name_plural': 'growth forms',
            },
        ),
        migrations.CreateModel(
            name='HabitatComplexityScore',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('val', models.PositiveSmallIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Management',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('name_secondary', models.CharField(blank=True, max_length=255, verbose_name='secondary name')),
                ('est_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(2019)], verbose_name='year established')),
                ('notes', models.TextField(blank=True)),
                ('boundary', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, geography=True, null=True, srid=4326)),
                ('size', models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Size (ha)')),
                ('no_take', models.NullBooleanField(verbose_name='no-take zone')),
                ('periodic_closure', models.NullBooleanField(verbose_name='periodic closure')),
                ('open_access', models.NullBooleanField(verbose_name='open access')),
                ('size_limits', models.NullBooleanField(verbose_name='size limits')),
                ('gear_restriction', models.NullBooleanField(verbose_name='partial gear restriction')),
                ('species_restriction', models.NullBooleanField(verbose_name='partial species restriction')),
                ('validations', django.contrib.postgres.fields.jsonb.JSONField(blank=True, encoder=rest_framework.utils.encoders.JSONEncoder, null=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'management',
                'verbose_name': 'management regime',
            },
        ),
        migrations.CreateModel(
            name='ManagementCompliance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'management_compliance',
                'verbose_name': 'management compliance',
            },
        ),
        migrations.CreateModel(
            name='ManagementParty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'management_party',
                'verbose_name': 'management party',
                'verbose_name_plural': 'management parties',
            },
        ),
        migrations.CreateModel(
            name='MPA',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('wdpa_id', models.IntegerField(blank=True, null=True)),
                ('est_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(2019)], verbose_name='year established')),
                ('notes', models.TextField(blank=True)),
                ('boundary', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, geography=True, null=True, srid=4326)),
                ('size', models.IntegerField(blank=True, null=True, verbose_name='Size (km2)')),
            ],
            options={
                'ordering': ('name', 'est_year'),
                'db_table': 'mpa',
                'verbose_name': 'MPA',
                'verbose_name_plural': 'MPAs',
            },
        ),
        migrations.CreateModel(
            name='ObsBeltFish',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('size', models.DecimalField(decimal_places=1, max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='size (cm)')),
                ('count', models.PositiveIntegerField(default=1)),
                ('include', models.BooleanField(default=True, verbose_name='include observation in aggregations/analyses?')),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'obs_transectbeltfish',
                'verbose_name': 'fish belt transect observation',
            },
        ),
        migrations.CreateModel(
            name='ObsBenthicLIT',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('length', models.PositiveSmallIntegerField(verbose_name='length (cm)')),
                ('include', models.BooleanField(default=True, verbose_name='include observation in aggregations/analyses?')),
                ('notes', models.TextField(blank=True)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.BenthicAttribute')),
                ('growth_form', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.GrowthForm')),
            ],
            options={
                'db_table': 'obs_benthiclit',
                'verbose_name': 'benthic LIT observation',
            },
        ),
        migrations.CreateModel(
            name='ObsBenthicPIT',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('interval', models.DecimalField(decimal_places=2, max_digits=7)),
                ('include', models.BooleanField(default=True, verbose_name='include observation in aggregations/analyses?')),
                ('notes', models.TextField(blank=True)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.BenthicAttribute')),
                ('growth_form', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.GrowthForm')),
            ],
            options={
                'db_table': 'obs_benthicpit',
                'verbose_name': 'benthic PIT observation',
            },
        ),
        migrations.CreateModel(
            name='Observer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('rank', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'db_table': 'observer',
            },
        ),
        migrations.CreateModel(
            name='ObsHabitatComplexity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('interval', models.DecimalField(decimal_places=2, max_digits=7)),
                ('include', models.BooleanField(default=True, verbose_name='include observation in aggregations/analyses?')),
                ('notes', models.TextField(blank=True)),
                ('score', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.HabitatComplexityScore')),
            ],
            options={
                'db_table': 'obs_habitatcomplexity',
                'verbose_name': 'habitat complexity transect observation',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile_updated_by', to='api.Profile')),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(90, 'open'), (80, 'test'), (10, 'locked')], default=90)),
                ('data_policy_beltfish', models.PositiveSmallIntegerField(choices=[(10, 'private'), (50, 'public summary'), (100, 'public')], default=50)),
                ('data_policy_benthiclit', models.PositiveSmallIntegerField(choices=[(10, 'private'), (50, 'public summary'), (100, 'public')], default=50)),
                ('data_policy_benthicpit', models.PositiveSmallIntegerField(choices=[(10, 'private'), (50, 'public summary'), (100, 'public')], default=50)),
                ('data_policy_habitatcomplexity', models.PositiveSmallIntegerField(choices=[(10, 'private'), (50, 'public summary'), (100, 'public')], default=50)),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'project',
            },
        ),
        migrations.CreateModel(
            name='ProjectProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('role', models.PositiveSmallIntegerField(choices=[(90, 'admin'), (50, 'collector'), (10, 'read-only')])),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='api.Profile')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='api.Project')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projectprofile_updated_by', to='api.Profile')),
            ],
            options={
                'ordering': ('project', 'profile'),
                'db_table': 'project_profile',
            },
        ),
        migrations.CreateModel(
            name='ReefExposure',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('val', models.PositiveSmallIntegerField()),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reefexposure_updated_by', to='api.Profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReefSlope',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('val', models.PositiveSmallIntegerField()),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reefslope_updated_by', to='api.Profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReefType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reeftype_updated_by', to='api.Profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReefZone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reefzone_updated_by', to='api.Profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='region_updated_by', to='api.Profile')),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'region',
            },
        ),
        migrations.CreateModel(
            name='RelativeDepth',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='relativedepth_updated_by', to='api.Profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('sample_date', models.DateField(default=api.models.mermaid.default_date)),
                ('sample_time', models.TimeField(default=api.models.mermaid.default_time)),
                ('depth', models.DecimalField(decimal_places=1, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(40)], verbose_name='depth (m)')),
                ('notes', models.TextField(blank=True)),
                ('current', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Current')),
            ],
            options={
                'ordering': ('site', 'sample_date'),
                'db_table': 'sample_event',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('public', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('validations', django.contrib.postgres.fields.jsonb.JSONField(blank=True, encoder=rest_framework.utils.encoders.JSONEncoder, null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Country')),
                ('exposure', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.ReefExposure')),
                ('predecessor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Site')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='api.Project')),
                ('reef_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.ReefType')),
                ('reef_zone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.ReefZone')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='site_updated_by', to='api.Profile')),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'site',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(90, 'superuser approved'), (10, 'proposed')], default=10)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tag_updated_by', to='api.Profile')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Tide',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tide_updated_by', to='api.Profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransectMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'transectmethod',
            },
        ),
        migrations.CreateModel(
            name='UUIDTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_uuidtaggeditem_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='api.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Visibility',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('val', models.PositiveSmallIntegerField()),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='visibility_updated_by', to='api.Profile')),
            ],
            options={
                'verbose_name_plural': 'visibilities',
            },
        ),
        migrations.CreateModel(
            name='FishAttributeView',
            fields=[
                ('fishattribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.FishAttribute')),
                ('name', models.CharField(max_length=100)),
                ('biomass_constant_a', models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True)),
                ('biomass_constant_b', models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True)),
                ('biomass_constant_c', models.DecimalField(blank=True, decimal_places=6, default=1, max_digits=7, null=True)),
                ('trophic_group', models.CharField(blank=True, max_length=100)),
                ('trophic_level', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('functional_group', models.CharField(blank=True, max_length=100)),
                ('vulnerability', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
            ],
            options={
                'db_table': 'vw_fish_attributes',
                'managed': False,
            },
            bases=('api.fishattribute',),
        ),
        migrations.CreateModel(
            name='BeltFish',
            fields=[
                ('transectmethod_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.TransectMethod')),
            ],
            options={
                'db_table': 'transectmethod_transectbeltfish',
                'verbose_name': 'fish belt transect',
                'verbose_name_plural': 'fish belt transect observations',
            },
            bases=('api.transectmethod',),
        ),
        migrations.CreateModel(
            name='BenthicLIT',
            fields=[
                ('transectmethod_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.TransectMethod')),
            ],
            options={
                'db_table': 'transectmethod_benthiclit',
                'verbose_name': 'benthic LIT',
                'verbose_name_plural': 'benthic LIT observations',
            },
            bases=('api.transectmethod',),
        ),
        migrations.CreateModel(
            name='BenthicPIT',
            fields=[
                ('transectmethod_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.TransectMethod')),
                ('interval_size', models.DecimalField(decimal_places=2, default=0.5, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='interval size (m)')),
            ],
            options={
                'db_table': 'transectmethod_benthicpit',
                'verbose_name': 'benthic PIT',
                'verbose_name_plural': 'benthic PIT observations',
            },
            bases=('api.transectmethod',),
        ),
        migrations.CreateModel(
            name='FishFamily',
            fields=[
                ('fishattribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.FishAttribute')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'fish_family',
                'verbose_name_plural': 'fish families',
            },
            bases=('api.fishattribute',),
        ),
        migrations.CreateModel(
            name='FishGenus',
            fields=[
                ('fishattribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.FishAttribute')),
                ('name', models.CharField(max_length=100)),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.FishFamily')),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'fish_genus',
                'verbose_name_plural': 'fish genera',
            },
            bases=('api.fishattribute',),
        ),
        migrations.CreateModel(
            name='FishSpecies',
            fields=[
                ('fishattribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.FishAttribute')),
                ('name', models.CharField(max_length=100)),
                ('biomass_constant_a', models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True)),
                ('biomass_constant_b', models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True)),
                ('biomass_constant_c', models.DecimalField(blank=True, decimal_places=6, default=1, max_digits=7, null=True)),
                ('vulnerability', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_length', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2000)], verbose_name='maximum length (cm)')),
                ('trophic_level', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('max_length_type', models.CharField(blank=True, choices=[('fork length', 'fork length'), ('standard length', 'standard length'), ('total length', 'total length'), ('wing diameter', 'wing diameter')], max_length=50)),
                ('climate_score', models.DecimalField(blank=True, decimal_places=9, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('genus', 'name'),
                'db_table': 'fish_species',
                'verbose_name_plural': 'fish species',
            },
            bases=('api.fishattribute',),
        ),
        migrations.CreateModel(
            name='HabitatComplexity',
            fields=[
                ('transectmethod_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.TransectMethod')),
                ('interval_size', models.DecimalField(decimal_places=2, default=0.5, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='interval size (m)')),
            ],
            options={
                'db_table': 'transectmethod_habitatcomplexity',
                'verbose_name': 'habitat complexity transect',
                'verbose_name_plural': 'habitat complexity transect observations',
            },
            bases=('api.transectmethod',),
        ),
        migrations.CreateModel(
            name='MPAZone',
            fields=[
                ('management_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Management')),
            ],
            options={
                'db_table': 'mpa_zone',
            },
            bases=('api.management',),
        ),
        migrations.AddField(
            model_name='transectmethod',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transectmethod_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='sampleevent',
            name='management',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Management'),
        ),
        migrations.AddField(
            model_name='sampleevent',
            name='relative_depth',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.RelativeDepth'),
        ),
        migrations.AddField(
            model_name='sampleevent',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sample_events', to='api.Site'),
        ),
        migrations.AddField(
            model_name='sampleevent',
            name='tide',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Tide'),
        ),
        migrations.AddField(
            model_name='sampleevent',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sampleevent_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='sampleevent',
            name='visibility',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Visibility'),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='api.UUIDTaggedItem', to='api.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='project',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='obshabitatcomplexity',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='obshabitatcomplexity_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='observer',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Profile'),
        ),
        migrations.AddField(
            model_name='observer',
            name='transectmethod',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observers', to='api.TransectMethod', verbose_name='transect method'),
        ),
        migrations.AddField(
            model_name='observer',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='observer_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='obsbenthicpit',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='obsbenthicpit_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='obsbenthiclit',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='obsbenthiclit_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='obsbeltfish',
            name='fish_attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.FishAttribute'),
        ),
        migrations.AddField(
            model_name='obsbeltfish',
            name='size_bin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.FishSizeBin'),
        ),
        migrations.AddField(
            model_name='obsbeltfish',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='obsbeltfish_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='mpa',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mpa_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='managementparty',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managementparty_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='managementcompliance',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managementcompliance_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='management',
            name='compliance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.ManagementCompliance'),
        ),
        migrations.AddField(
            model_name='management',
            name='parties',
            field=models.ManyToManyField(blank=True, related_name='management_parties', to='api.ManagementParty'),
        ),
        migrations.AddField(
            model_name='management',
            name='predecessor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Management'),
        ),
        migrations.AddField(
            model_name='management',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Project'),
        ),
        migrations.AddField(
            model_name='management',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='management_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='habitatcomplexityscore',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='habitatcomplexityscore_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='growthform',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='growthform_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='fishsizebin',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fishsizebin_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='fishsize',
            name='fish_bin_size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.FishSizeBin'),
        ),
        migrations.AddField(
            model_name='fishsize',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fishsize_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='fishgrouptrophic',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fishgrouptrophic_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='fishgroupsize',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fishgroupsize_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='fishgroupfunction',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fishgroupfunction_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='fishbelttransect',
            name='reef_slope',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.ReefSlope'),
        ),
        migrations.AddField(
            model_name='fishbelttransect',
            name='sample_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.SampleEvent'),
        ),
        migrations.AddField(
            model_name='fishbelttransect',
            name='size_bin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.FishSizeBin'),
        ),
        migrations.AddField(
            model_name='fishbelttransect',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fishbelttransect_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='fishbelttransect',
            name='width',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.BeltTransectWidth', verbose_name='width (m)'),
        ),
        migrations.AddField(
            model_name='fishattribute',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fishattribute_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='current',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='country',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='country_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='collectrecord',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collect_records', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='collectrecord',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collect_records', to='api.Project'),
        ),
        migrations.AddField(
            model_name='collectrecord',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collectrecord_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='benthictransect',
            name='reef_slope',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.ReefSlope'),
        ),
        migrations.AddField(
            model_name='benthictransect',
            name='sample_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.SampleEvent'),
        ),
        migrations.AddField(
            model_name='benthictransect',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='benthictransect_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='benthiclifehistory',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='benthiclifehistory_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='benthicattribute',
            name='life_history',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.BenthicLifeHistory'),
        ),
        migrations.AddField(
            model_name='benthicattribute',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.BenthicAttribute'),
        ),
        migrations.AddField(
            model_name='benthicattribute',
            name='regions',
            field=models.ManyToManyField(blank=True, to='api.Region'),
        ),
        migrations.AddField(
            model_name='benthicattribute',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='benthicattribute_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='belttransectwidth',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='belttransectwidth_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='authuser',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authusers', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='authuser',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authuser_updated_by', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='application',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registered_apps', to='api.Profile'),
        ),
        migrations.AddField(
            model_name='application',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='application_updated_by', to='api.Profile'),
        ),
        migrations.AlterUniqueTogether(
            name='sampleevent',
            unique_together=set([('site', 'management', 'sample_date', 'sample_time', 'depth', 'visibility', 'current', 'relative_depth', 'tide')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectprofile',
            unique_together=set([('project', 'profile')]),
        ),
        migrations.AddField(
            model_name='obshabitatcomplexity',
            name='habitatcomplexity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='habitatcomplexity_set', to='api.HabitatComplexity'),
        ),
        migrations.AlterUniqueTogether(
            name='observer',
            unique_together=set([('transectmethod', 'profile')]),
        ),
        migrations.AddField(
            model_name='obsbenthicpit',
            name='benthicpit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='obsbenthicpit_set', to='api.BenthicPIT'),
        ),
        migrations.AddField(
            model_name='obsbenthiclit',
            name='benthiclit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='obsbenthiclit_set', to='api.BenthicLIT'),
        ),
        migrations.AddField(
            model_name='obsbeltfish',
            name='beltfish',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beltfish_observations', to='api.BeltFish'),
        ),
        migrations.AddField(
            model_name='mpazone',
            name='mpa',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mpa_zones', to='api.MPA'),
        ),
        migrations.AddField(
            model_name='habitatcomplexity',
            name='transect',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='habitatcomplexity_method', to='api.BenthicTransect', verbose_name='benthic transect'),
        ),
        migrations.AddField(
            model_name='fishspecies',
            name='functional_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.FishGroupFunction'),
        ),
        migrations.AddField(
            model_name='fishspecies',
            name='genus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.FishGenus'),
        ),
        migrations.AddField(
            model_name='fishspecies',
            name='group_size',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.FishGroupSize'),
        ),
        migrations.AddField(
            model_name='fishspecies',
            name='regions',
            field=models.ManyToManyField(blank=True, to='api.Region'),
        ),
        migrations.AddField(
            model_name='fishspecies',
            name='trophic_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.FishGroupTrophic'),
        ),
        migrations.AddField(
            model_name='benthicpit',
            name='transect',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='benthicpit_method', to='api.BenthicTransect', verbose_name='benthic transect'),
        ),
        migrations.AddField(
            model_name='benthiclit',
            name='transect',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='benthiclit_method', to='api.BenthicTransect', verbose_name='benthic transect'),
        ),
        migrations.AddField(
            model_name='beltfish',
            name='transect',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='transectbeltfish_method', to='api.FishBeltTransect', verbose_name='fish belt transect'),
        ),
        migrations.AlterUniqueTogether(
            name='authuser',
            unique_together=set([('profile', 'user_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='application',
            unique_together=set([('profile', 'client_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='obshabitatcomplexity',
            unique_together=set([('habitatcomplexity', 'interval')]),
        ),
        migrations.AlterUniqueTogether(
            name='obsbenthicpit',
            unique_together=set([('benthicpit', 'interval')]),
        ),
    ]
