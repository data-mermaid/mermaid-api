# Generated by Django 2.2.27 on 2022-08-12 13:04

import uuid

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
import django.db.models.deletion
import rest_framework.utils.encoders
import taggit.managers
from django.db import migrations, models

import api.models.mermaid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="BeltFishObsSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_id", models.UUIDField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("transect_width_name", models.CharField(blank=True, max_length=100, null=True)),
                ("reef_slope", models.CharField(max_length=50)),
                ("fish_family", models.CharField(blank=True, max_length=100, null=True)),
                ("fish_genus", models.CharField(blank=True, max_length=100, null=True)),
                ("fish_taxon", models.CharField(blank=True, max_length=100, null=True)),
                ("trophic_group", models.CharField(blank=True, max_length=100)),
                (
                    "trophic_level",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True),
                ),
                ("functional_group", models.CharField(blank=True, max_length=100)),
                (
                    "vulnerability",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True),
                ),
                (
                    "biomass_constant_a",
                    models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True),
                ),
                (
                    "biomass_constant_b",
                    models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True),
                ),
                (
                    "biomass_constant_c",
                    models.DecimalField(
                        blank=True, decimal_places=6, default=1, max_digits=7, null=True
                    ),
                ),
                ("size_bin", models.CharField(max_length=100)),
                (
                    "size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="size (cm)",
                    ),
                ),
                ("count", models.PositiveIntegerField(blank=True, default=1, null=True)),
                (
                    "biomass_kgha",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=9,
                        null=True,
                        verbose_name="biomass (kg/ha)",
                    ),
                ),
                ("observation_notes", models.TextField(blank=True)),
                ("data_policy_beltfish", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "belt_fish_obs_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BeltFishSESQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("sample_unit_count", models.PositiveSmallIntegerField()),
                (
                    "depth_avg",
                    models.DecimalField(decimal_places=2, max_digits=4, verbose_name="depth (m)"),
                ),
                ("current_name", models.CharField(max_length=100)),
                ("tide_name", models.CharField(max_length=100)),
                ("visibility_name", models.CharField(max_length=100)),
                (
                    "biomass_kgha_avg",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="biomass (kg/ha)",
                    ),
                ),
                (
                    "biomass_kgha_by_trophic_group_avg",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "biomass_kgha_by_fish_family_avg",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_beltfish", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "belt_fish_se_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BeltFishSUSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_ids", django.contrib.postgres.fields.jsonb.JSONField()),
                ("total_abundance", models.PositiveIntegerField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("transect_width_name", models.CharField(blank=True, max_length=100, null=True)),
                ("reef_slope", models.CharField(max_length=50)),
                ("size_bin", models.CharField(max_length=100)),
                (
                    "biomass_kgha",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="biomass (kg/ha)",
                    ),
                ),
                (
                    "biomass_kgha_by_trophic_group",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "biomass_kgha_by_fish_family",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_beltfish", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "belt_fish_su_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicLITObsSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_id", models.UUIDField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                ("relative_depth", models.CharField(max_length=50)),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("reef_slope", models.CharField(max_length=50)),
                ("length", models.PositiveSmallIntegerField()),
                ("total_length", models.PositiveIntegerField()),
                ("benthic_category", models.CharField(max_length=100)),
                ("benthic_attribute", models.CharField(max_length=100)),
                ("growth_form", models.CharField(max_length=100)),
                ("observation_notes", models.TextField(blank=True)),
                ("data_policy_benthiclit", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "benthiclit_obs_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicLITSESQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("sample_unit_count", models.PositiveSmallIntegerField()),
                (
                    "depth_avg",
                    models.DecimalField(decimal_places=2, max_digits=4, verbose_name="depth (m)"),
                ),
                ("current_name", models.CharField(max_length=100)),
                ("tide_name", models.CharField(max_length=100)),
                ("visibility_name", models.CharField(max_length=100)),
                (
                    "percent_cover_by_benthic_category_avg",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_benthiclit", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "benthiclit_se_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicLITSUSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_ids", django.contrib.postgres.fields.jsonb.JSONField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("total_length", models.PositiveIntegerField()),
                ("reef_slope", models.CharField(max_length=50)),
                (
                    "percent_cover_by_benthic_category",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_benthiclit", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "benthiclit_su_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicPhotoQuadratTransectObsSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_id", models.UUIDField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                ("relative_depth", models.CharField(max_length=50)),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("quadrat_size", models.DecimalField(decimal_places=2, max_digits=6)),
                ("num_quadrats", models.PositiveSmallIntegerField()),
                ("num_points_per_quadrat", models.PositiveSmallIntegerField()),
                ("reef_slope", models.CharField(max_length=50)),
                ("quadrat_number", models.PositiveSmallIntegerField(verbose_name="quadrat number")),
                ("benthic_category", models.CharField(max_length=100)),
                ("benthic_attribute", models.CharField(max_length=100)),
                ("growth_form", models.CharField(max_length=100)),
                ("num_points", models.PositiveSmallIntegerField()),
                ("observation_notes", models.TextField(blank=True)),
                ("data_policy_benthicpqt", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "benthicpqt_obs_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicPhotoQuadratTransectSESQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("sample_unit_count", models.PositiveSmallIntegerField()),
                (
                    "depth_avg",
                    models.DecimalField(decimal_places=2, max_digits=4, verbose_name="depth (m)"),
                ),
                ("current_name", models.CharField(max_length=100)),
                ("tide_name", models.CharField(max_length=100)),
                ("visibility_name", models.CharField(max_length=100)),
                (
                    "percent_cover_by_benthic_category_avg",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_benthicpqt", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "benthicpqt_se_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicPhotoQuadratTransectSUSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_ids", django.contrib.postgres.fields.jsonb.JSONField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("reef_slope", models.CharField(max_length=50)),
                (
                    "percent_cover_by_benthic_category",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_benthicpqt", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "benthicpqt_su_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicPITObsSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_id", models.UUIDField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("reef_slope", models.CharField(max_length=50)),
                (
                    "interval_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        max_digits=4,
                        verbose_name="interval size (m)",
                    ),
                ),
                (
                    "interval_start",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        max_digits=4,
                        verbose_name="interval start (m)",
                    ),
                ),
                ("interval", models.DecimalField(decimal_places=2, max_digits=7)),
                ("benthic_category", models.CharField(max_length=100)),
                ("benthic_attribute", models.CharField(max_length=100)),
                ("growth_form", models.CharField(max_length=100)),
                ("observation_notes", models.TextField(blank=True)),
                ("data_policy_benthicpit", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "benthicpit_obs_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicPITSESQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("sample_unit_count", models.PositiveSmallIntegerField()),
                (
                    "depth_avg",
                    models.DecimalField(decimal_places=2, max_digits=4, verbose_name="depth (m)"),
                ),
                ("current_name", models.CharField(max_length=100)),
                ("tide_name", models.CharField(max_length=100)),
                ("visibility_name", models.CharField(max_length=100)),
                (
                    "percent_cover_by_benthic_category_avg",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_benthicpit", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "benthicpit_se_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicPITSUSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_ids", django.contrib.postgres.fields.jsonb.JSONField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("reef_slope", models.CharField(max_length=50)),
                (
                    "interval_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        max_digits=4,
                        verbose_name="interval size (m)",
                    ),
                ),
                (
                    "interval_start",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        max_digits=4,
                        verbose_name="interval start (m)",
                    ),
                ),
                (
                    "percent_cover_by_benthic_category",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_benthicpit", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "benthicpit_su_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BleachingQCColoniesBleachedObsSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_id", models.UUIDField()),
                ("quadrat_size", models.DecimalField(decimal_places=2, max_digits=6)),
                ("benthic_attribute", models.CharField(max_length=100)),
                ("growth_form", models.CharField(max_length=100)),
                (
                    "count_normal",
                    models.PositiveSmallIntegerField(default=0, verbose_name="normal"),
                ),
                ("count_pale", models.PositiveSmallIntegerField(default=0, verbose_name="pale")),
                (
                    "count_20",
                    models.PositiveSmallIntegerField(default=0, verbose_name="0-20% bleached"),
                ),
                (
                    "count_50",
                    models.PositiveSmallIntegerField(default=0, verbose_name="20-50% bleached"),
                ),
                (
                    "count_80",
                    models.PositiveSmallIntegerField(default=0, verbose_name="50-80% bleached"),
                ),
                (
                    "count_100",
                    models.PositiveSmallIntegerField(default=0, verbose_name="80-100% bleached"),
                ),
                (
                    "count_dead",
                    models.PositiveSmallIntegerField(default=0, verbose_name="recently dead"),
                ),
                ("data_policy_bleachingqc", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "bleachingqc_colonies_bleached_obs_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BleachingQCQuadratBenthicPercentObsSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_id", models.UUIDField()),
                ("quadrat_size", models.DecimalField(decimal_places=2, max_digits=6)),
                ("quadrat_number", models.PositiveSmallIntegerField(verbose_name="quadrat number")),
                (
                    "percent_hard",
                    models.PositiveSmallIntegerField(default=0, verbose_name="hard coral, % cover"),
                ),
                (
                    "percent_soft",
                    models.PositiveSmallIntegerField(default=0, verbose_name="soft coral, % cover"),
                ),
                (
                    "percent_algae",
                    models.PositiveSmallIntegerField(default=0, verbose_name="macroalgae, % cover"),
                ),
                ("data_policy_bleachingqc", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "bleachingqc_quadrat_benthic_percent_obs_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BleachingQCSESQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("sample_unit_count", models.PositiveSmallIntegerField()),
                (
                    "depth_avg",
                    models.DecimalField(decimal_places=2, max_digits=4, verbose_name="depth (m)"),
                ),
                ("current_name", models.CharField(max_length=100)),
                ("tide_name", models.CharField(max_length=100)),
                ("visibility_name", models.CharField(max_length=100)),
                ("quadrat_size_avg", models.DecimalField(decimal_places=2, max_digits=6)),
                ("count_total_avg", models.DecimalField(decimal_places=1, max_digits=5)),
                ("count_genera_avg", models.DecimalField(decimal_places=1, max_digits=4)),
                ("percent_normal_avg", models.DecimalField(decimal_places=1, max_digits=4)),
                ("percent_pale_avg", models.DecimalField(decimal_places=1, max_digits=4)),
                ("percent_bleached_avg", models.DecimalField(decimal_places=1, max_digits=4)),
                ("quadrat_count_avg", models.DecimalField(decimal_places=1, max_digits=4)),
                ("percent_hard_avg_avg", models.DecimalField(decimal_places=1, max_digits=4)),
                ("percent_soft_avg_avg", models.DecimalField(decimal_places=1, max_digits=4)),
                ("percent_algae_avg_avg", models.DecimalField(decimal_places=1, max_digits=4)),
                ("data_policy_bleachingqc", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "bleachingqc_se_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BleachingQCSUSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_ids", django.contrib.postgres.fields.jsonb.JSONField()),
                ("quadrat_size", models.DecimalField(decimal_places=2, max_digits=6)),
                ("count_genera", models.PositiveSmallIntegerField(default=0)),
                ("count_total", models.PositiveSmallIntegerField(default=0)),
                ("percent_normal", models.DecimalField(decimal_places=1, default=0, max_digits=4)),
                ("percent_pale", models.DecimalField(decimal_places=1, default=0, max_digits=4)),
                (
                    "percent_bleached",
                    models.DecimalField(decimal_places=1, default=0, max_digits=4),
                ),
                ("quadrat_count", models.PositiveSmallIntegerField(default=0)),
                (
                    "percent_hard_avg",
                    models.DecimalField(decimal_places=1, default=0, max_digits=4),
                ),
                (
                    "percent_soft_avg",
                    models.DecimalField(decimal_places=1, default=0, max_digits=4),
                ),
                (
                    "percent_algae_avg",
                    models.DecimalField(decimal_places=1, default=0, max_digits=4),
                ),
                ("data_policy_bleachingqc", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "bleachingqc_su_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HabitatComplexityObsSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_id", models.UUIDField()),
                ("sample_time", models.TimeField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("reef_slope", models.CharField(max_length=50)),
                (
                    "interval_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        max_digits=4,
                        verbose_name="interval size (m)",
                    ),
                ),
                ("interval", models.DecimalField(decimal_places=2, max_digits=7)),
                ("observation_notes", models.TextField(blank=True)),
                ("score", models.PositiveSmallIntegerField()),
                ("score_name", models.CharField(max_length=100)),
                ("data_policy_habitatcomplexity", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "habitatcomplexity_obs_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HabitatComplexitySESQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("sample_unit_count", models.PositiveSmallIntegerField()),
                (
                    "depth_avg",
                    models.DecimalField(decimal_places=2, max_digits=4, verbose_name="depth (m)"),
                ),
                ("current_name", models.CharField(max_length=100)),
                ("tide_name", models.CharField(max_length=100)),
                ("visibility_name", models.CharField(max_length=100)),
                ("score_avg_avg", models.DecimalField(decimal_places=2, max_digits=3)),
                ("data_policy_habitatcomplexity", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "habitatcomplexity_su_se",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HabitatComplexitySUSQLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("site_notes", models.TextField(blank=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_name_secondary", models.CharField(max_length=255)),
                ("management_est_year", models.PositiveSmallIntegerField()),
                (
                    "management_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        verbose_name="Size (ha)",
                    ),
                ),
                (
                    "management_parties",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_compliance", models.CharField(max_length=100)),
                (
                    "management_rules",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("management_notes", models.TextField(blank=True)),
                ("sample_date", models.DateField()),
                ("sample_event_id", models.UUIDField()),
                ("sample_event_notes", models.TextField(blank=True)),
                (
                    "covariates",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "depth",
                    models.DecimalField(decimal_places=1, max_digits=3, verbose_name="depth (m)"),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                ("relative_depth", models.CharField(max_length=50)),
                ("sample_time", models.TimeField()),
                (
                    "observers",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("current_name", models.CharField(max_length=50)),
                ("tide_name", models.CharField(max_length=50)),
                ("visibility_name", models.CharField(max_length=50)),
                ("sample_unit_ids", django.contrib.postgres.fields.jsonb.JSONField()),
                ("transect_number", models.PositiveSmallIntegerField()),
                (
                    "transect_len_surveyed",
                    models.PositiveSmallIntegerField(verbose_name="transect length surveyed (m)"),
                ),
                ("reef_slope", models.CharField(max_length=50)),
                ("score_avg", models.DecimalField(decimal_places=2, max_digits=3)),
                ("data_policy_habitatcomplexity", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "habitatcomplexity_su_sm",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SummarySampleEventSQLModel",
            fields=[
                ("sample_event_id", models.UUIDField(primary_key=True, serialize=False)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("site_notes", models.TextField(blank=True)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                (
                    "project_admins",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("sample_date", models.DateField(blank=True, null=True)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_notes", models.TextField(blank=True, null=True)),
                (
                    "protocols",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_beltfish", models.CharField(max_length=50)),
                ("data_policy_benthiclit", models.CharField(max_length=50)),
                ("data_policy_benthicpit", models.CharField(max_length=50)),
                ("data_policy_habitatcomplexity", models.CharField(max_length=50)),
                ("data_policy_bleachingqc", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "summary_sample_event_sql",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SummarySiteSQLModel",
            fields=[
                ("site_id", models.UUIDField(primary_key=True, serialize=False)),
                ("site_name", models.CharField(max_length=255)),
                ("site_notes", models.TextField(blank=True)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                (
                    "project_admins",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("date_min", models.DateField(blank=True, null=True)),
                ("date_max", models.DateField(blank=True, null=True)),
                (
                    "management_regimes",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "protocols",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_beltfish", models.CharField(max_length=50)),
                ("data_policy_benthiclit", models.CharField(max_length=50)),
                ("data_policy_benthicpit", models.CharField(max_length=50)),
                ("data_policy_habitatcomplexity", models.CharField(max_length=50)),
                ("data_policy_bleachingqc", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "summary_site_sql",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AppVersion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("application", models.CharField(max_length=25, unique=True)),
                ("version", models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name="ArchivedRecord",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
                ("project_pk", models.UUIDField(blank=True, db_index=True, null=True)),
                ("record_pk", models.UUIDField(blank=True, db_index=True, null=True)),
                ("record", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="BeltTransectWidth",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(blank=True, max_length=100, null=True, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("iso", models.CharField(max_length=2)),
                ("name", models.CharField(max_length=50)),
            ],
            options={
                "verbose_name_plural": "countries",
                "db_table": "country",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Current",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                ("val", models.PositiveSmallIntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FishAttribute",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "superuser approved"), (10, "proposed")], default=10
                    ),
                ),
            ],
            options={
                "db_table": "fish_attribute",
            },
        ),
        migrations.CreateModel(
            name="Management",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "name_secondary",
                    models.CharField(blank=True, max_length=255, verbose_name="secondary name"),
                ),
                (
                    "est_year",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(2022)],
                        verbose_name="year established",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "boundary",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, geography=True, null=True, srid=4326
                    ),
                ),
                (
                    "size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Size (ha)",
                    ),
                ),
                ("no_take", models.BooleanField(default=False, verbose_name="no-take zone")),
                (
                    "periodic_closure",
                    models.BooleanField(default=False, verbose_name="periodic closure"),
                ),
                ("open_access", models.BooleanField(default=False, verbose_name="open access")),
                ("size_limits", models.BooleanField(default=False, verbose_name="size limits")),
                (
                    "gear_restriction",
                    models.BooleanField(default=False, verbose_name="partial gear restriction"),
                ),
                (
                    "species_restriction",
                    models.BooleanField(default=False, verbose_name="partial species restriction"),
                ),
                (
                    "access_restriction",
                    models.BooleanField(default=False, verbose_name="access restriction"),
                ),
                (
                    "validations",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, encoder=rest_framework.utils.encoders.JSONEncoder, null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "management regime",
                "db_table": "management",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("first_name", models.CharField(blank=True, max_length=100, null=True)),
                ("last_name", models.CharField(blank=True, max_length=100, null=True)),
                ("picture_url", models.URLField(blank=True, max_length=2048, null=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="profile_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "profile",
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                (
                    "data_policy_beltfish",
                    models.PositiveSmallIntegerField(
                        choices=[(10, "private"), (50, "public summary"), (100, "public")],
                        default=50,
                    ),
                ),
                (
                    "data_policy_benthiclit",
                    models.PositiveSmallIntegerField(
                        choices=[(10, "private"), (50, "public summary"), (100, "public")],
                        default=50,
                    ),
                ),
                (
                    "data_policy_benthicpit",
                    models.PositiveSmallIntegerField(
                        choices=[(10, "private"), (50, "public summary"), (100, "public")],
                        default=50,
                    ),
                ),
                (
                    "data_policy_habitatcomplexity",
                    models.PositiveSmallIntegerField(
                        choices=[(10, "private"), (50, "public summary"), (100, "public")],
                        default=50,
                    ),
                ),
                (
                    "data_policy_bleachingqc",
                    models.PositiveSmallIntegerField(
                        choices=[(10, "private"), (50, "public summary"), (100, "public")],
                        default=50,
                    ),
                ),
                (
                    "data_policy_benthicpqt",
                    models.PositiveSmallIntegerField(
                        choices=[(10, "private"), (50, "public summary"), (100, "public")],
                        default=50,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="project_created_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "project",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ReefExposure",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                ("val", models.PositiveSmallIntegerField()),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reefexposure_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reefexposure_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ReefType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reeftype_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reeftype_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ReefZone",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reefzone_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reefzone_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SummarySampleEventModel",
            fields=[
                ("sample_event_id", models.UUIDField(primary_key=True, serialize=False)),
                ("site_id", models.UUIDField()),
                ("site_name", models.CharField(max_length=255)),
                ("site_notes", models.TextField(blank=True)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                (
                    "project_admins",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("sample_date", models.DateField(blank=True, null=True)),
                ("management_id", models.UUIDField()),
                ("management_name", models.CharField(max_length=255)),
                ("management_notes", models.TextField(blank=True, null=True)),
                (
                    "protocols",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_beltfish", models.CharField(max_length=50)),
                ("data_policy_benthiclit", models.CharField(max_length=50)),
                ("data_policy_benthicpit", models.CharField(max_length=50)),
                ("data_policy_habitatcomplexity", models.CharField(max_length=50)),
                ("data_policy_bleachingqc", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "summary_sample_event",
            },
        ),
        migrations.CreateModel(
            name="SummarySiteModel",
            fields=[
                ("site_id", models.UUIDField(primary_key=True, serialize=False)),
                ("site_name", models.CharField(max_length=255)),
                ("site_notes", models.TextField(blank=True)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("project_id", models.UUIDField()),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "open"), (80, "test"), (10, "locked")], default=90
                    ),
                ),
                ("project_notes", models.TextField(blank=True)),
                ("contact_link", models.CharField(max_length=255)),
                ("tags", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("country_id", models.UUIDField()),
                ("country_name", models.CharField(max_length=50)),
                ("reef_type", models.CharField(max_length=50)),
                ("reef_zone", models.CharField(max_length=50)),
                ("reef_exposure", models.CharField(max_length=50)),
                (
                    "project_admins",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("date_min", models.DateField(blank=True, null=True)),
                ("date_max", models.DateField(blank=True, null=True)),
                (
                    "management_regimes",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                (
                    "protocols",
                    django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
                ),
                ("data_policy_beltfish", models.CharField(max_length=50)),
                ("data_policy_benthiclit", models.CharField(max_length=50)),
                ("data_policy_benthicpit", models.CharField(max_length=50)),
                ("data_policy_habitatcomplexity", models.CharField(max_length=50)),
                ("data_policy_bleachingqc", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "summary_site",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, unique=True, verbose_name="name")),
                ("slug", models.SlugField(max_length=100, unique=True, verbose_name="slug")),
                ("description", models.TextField(blank=True)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "superuser approved"), (10, "proposed")], default=10
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tag_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tag_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TransectMethod",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("collect_record_id", models.UUIDField(blank=True, db_index=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transectmethod_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transectmethod_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "transectmethod",
            },
        ),
        migrations.CreateModel(
            name="FishAttributeView",
            fields=[
                (
                    "fishattribute_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.FishAttribute",
                    ),
                ),
                ("id_family", models.UUIDField()),
                ("id_genus", models.UUIDField()),
                ("id_species", models.UUIDField()),
                ("name_family", models.CharField(max_length=100)),
                ("name_genus", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=100)),
                (
                    "biomass_constant_a",
                    models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True),
                ),
                (
                    "biomass_constant_b",
                    models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True),
                ),
                (
                    "biomass_constant_c",
                    models.DecimalField(
                        blank=True, decimal_places=6, default=1, max_digits=7, null=True
                    ),
                ),
                ("trophic_group", models.CharField(blank=True, max_length=100)),
                (
                    "trophic_level",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True),
                ),
                ("functional_group", models.CharField(blank=True, max_length=100)),
                (
                    "vulnerability",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True),
                ),
            ],
            options={
                "db_table": "vw_fish_attributes",
                "managed": False,
            },
            bases=("api.fishattribute",),
        ),
        migrations.CreateModel(
            name="BeltFish",
            fields=[
                (
                    "transectmethod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.TransectMethod",
                    ),
                ),
            ],
            options={
                "verbose_name": "fish belt transect",
                "verbose_name_plural": "fish belt transect observations",
                "db_table": "transectmethod_transectbeltfish",
            },
            bases=("api.transectmethod",),
        ),
        migrations.CreateModel(
            name="BenthicLIT",
            fields=[
                (
                    "transectmethod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.TransectMethod",
                    ),
                ),
            ],
            options={
                "verbose_name": "benthic LIT",
                "verbose_name_plural": "benthic LIT observations",
                "db_table": "transectmethod_benthiclit",
            },
            bases=("api.transectmethod",),
        ),
        migrations.CreateModel(
            name="BleachingQuadratCollection",
            fields=[
                (
                    "transectmethod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.TransectMethod",
                    ),
                ),
            ],
            options={
                "verbose_name": "bleaching quadrat collection",
                "verbose_name_plural": "bleaching quadrat collection observations",
                "db_table": "transectmethod_bleaching_quadrat_collection",
            },
            bases=("api.transectmethod",),
        ),
        migrations.CreateModel(
            name="FishFamily",
            fields=[
                (
                    "fishattribute_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.FishAttribute",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name_plural": "fish families",
                "db_table": "fish_family",
                "ordering": ("name",),
            },
            bases=("api.fishattribute",),
        ),
        migrations.CreateModel(
            name="FishGenus",
            fields=[
                (
                    "fishattribute_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.FishAttribute",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "family",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.FishFamily"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "fish genera",
                "db_table": "fish_genus",
                "ordering": ("name",),
            },
            bases=("api.fishattribute",),
        ),
        migrations.CreateModel(
            name="FishGrouping",
            fields=[
                (
                    "fishattribute_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.FishAttribute",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "fish_grouping",
                "ordering": ("name",),
            },
            bases=("api.fishattribute",),
        ),
        migrations.CreateModel(
            name="Visibility",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                ("val", models.PositiveSmallIntegerField()),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="visibility_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="visibility_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "visibilities",
            },
        ),
        migrations.CreateModel(
            name="UUIDTaggedItem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("object_id", models.UUIDField(db_index=True, verbose_name="object ID")),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_uuidtaggeditem_tagged_items",
                        to="contenttypes.ContentType",
                        verbose_name="content type",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="api.Tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Tide",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tide_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tide_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("name", models.CharField(max_length=255)),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("notes", models.TextField(blank=True)),
                (
                    "validations",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, encoder=rest_framework.utils.encoders.JSONEncoder, null=True
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.Country"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="site_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "exposure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.ReefExposure"
                    ),
                ),
                (
                    "predecessor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Site",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sites",
                        to="api.Project",
                    ),
                ),
                (
                    "reef_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.ReefType"
                    ),
                ),
                (
                    "reef_zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.ReefZone"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="site_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "site",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="SampleEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("sample_date", models.DateField(default=api.models.mermaid.default_date)),
                ("notes", models.TextField(blank=True)),
                (
                    "validations",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, encoder=rest_framework.utils.encoders.JSONEncoder, null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sampleevent_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "management",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.Management"
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sample_events",
                        to="api.Site",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sampleevent_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "sample_event",
                "ordering": ("site", "sample_date"),
            },
        ),
        migrations.CreateModel(
            name="Revision",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("table_name", models.CharField(db_index=True, editable=False, max_length=50)),
                ("record_id", models.UUIDField(db_index=True, editable=False)),
                ("project_id", models.UUIDField(db_index=True, editable=False, null=True)),
                ("profile_id", models.UUIDField(db_index=True, editable=False, null=True)),
                ("revision_num", models.IntegerField(default=1)),
                ("updated_on", models.DateTimeField(editable=False)),
                ("deleted", models.BooleanField(default=False, editable=False)),
            ],
            options={
                "db_table": "revision",
                "unique_together": {("table_name", "record_id")},
            },
        ),
        migrations.CreateModel(
            name="RelativeDepth",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="relativedepth_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="relativedepth_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        geography=True, srid=4326
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="region_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="region_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "region",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="ReefSlope",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                ("val", models.PositiveSmallIntegerField()),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reefslope_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reefslope_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuadratTransect",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True)),
                ("collect_record_id", models.UUIDField(blank=True, null=True)),
                ("sample_time", models.TimeField(blank=True, null=True)),
                (
                    "depth",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(40),
                        ],
                        verbose_name="depth (m)",
                    ),
                ),
                (
                    "len_surveyed",
                    models.DecimalField(
                        decimal_places=1, max_digits=4, verbose_name="transect length surveyed (m)"
                    ),
                ),
                ("number", models.PositiveSmallIntegerField(default=1)),
                ("label", models.CharField(blank=True, max_length=50)),
                (
                    "quadrat_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=1,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="single quadrat area (m2)",
                    ),
                ),
                ("num_quadrats", models.PositiveSmallIntegerField()),
                ("num_points_per_quadrat", models.PositiveSmallIntegerField()),
                (
                    "quadrat_number_start",
                    models.PositiveSmallIntegerField(
                        default=1, verbose_name="number of first quadrat"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quadrattransect_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "current",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Current",
                    ),
                ),
                (
                    "reef_slope",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.ReefSlope",
                    ),
                ),
                (
                    "relative_depth",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.RelativeDepth",
                    ),
                ),
                (
                    "sample_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.SampleEvent"
                    ),
                ),
                (
                    "tide",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Tide",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quadrattransect_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "visibility",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Visibility",
                    ),
                ),
            ],
            options={
                "db_table": "quadrat_transect",
            },
        ),
        migrations.CreateModel(
            name="QuadratCollection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True)),
                ("collect_record_id", models.UUIDField(blank=True, null=True)),
                ("sample_time", models.TimeField(blank=True, null=True)),
                (
                    "depth",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(40),
                        ],
                        verbose_name="depth (m)",
                    ),
                ),
                (
                    "quadrat_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=1,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="single quadrat area (m2)",
                    ),
                ),
                ("label", models.CharField(blank=True, max_length=50)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quadratcollection_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "current",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Current",
                    ),
                ),
                (
                    "relative_depth",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.RelativeDepth",
                    ),
                ),
                (
                    "sample_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.SampleEvent"
                    ),
                ),
                (
                    "tide",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Tide",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quadratcollection_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "visibility",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Visibility",
                    ),
                ),
            ],
            options={
                "db_table": "quadrat_collection",
            },
        ),
        migrations.AddField(
            model_name="project",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="api.UUIDTaggedItem",
                to="api.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="project_updated_by",
                to="api.Profile",
            ),
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=200)),
                (
                    "status",
                    models.CharField(
                        choices=[("info", "info"), ("warning", "warning"), ("error", "error")],
                        max_length=10,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notification_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.Profile"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notification_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "notification",
                "ordering": ["created_on"],
            },
        ),
        migrations.CreateModel(
            name="MPA",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("wdpa_id", models.IntegerField(blank=True, null=True)),
                (
                    "est_year",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(2022)],
                        verbose_name="year established",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "boundary",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, geography=True, null=True, srid=4326
                    ),
                ),
                ("size", models.IntegerField(blank=True, null=True, verbose_name="Size (km2)")),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mpa_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mpa_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name": "MPA",
                "verbose_name_plural": "MPAs",
                "db_table": "mpa",
                "ordering": ("name", "est_year"),
            },
        ),
        migrations.CreateModel(
            name="ManagementParty",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementparty_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementparty_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name": "management party",
                "verbose_name_plural": "management parties",
                "db_table": "management_party",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="ManagementCompliance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementcompliance_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managementcompliance_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name": "management compliance",
                "db_table": "management_compliance",
                "ordering": ("name",),
            },
        ),
        migrations.AddField(
            model_name="management",
            name="compliance",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.ManagementCompliance",
            ),
        ),
        migrations.AddField(
            model_name="management",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="management_created_by",
                to="api.Profile",
            ),
        ),
        migrations.AddField(
            model_name="management",
            name="parties",
            field=models.ManyToManyField(
                blank=True, related_name="management_parties", to="api.ManagementParty"
            ),
        ),
        migrations.AddField(
            model_name="management",
            name="predecessor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.Management",
            ),
        ),
        migrations.AddField(
            model_name="management",
            name="project",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.Project"),
        ),
        migrations.AddField(
            model_name="management",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="management_updated_by",
                to="api.Profile",
            ),
        ),
        migrations.CreateModel(
            name="HabitatComplexityScore",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("val", models.PositiveSmallIntegerField()),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="habitatcomplexityscore_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="habitatcomplexityscore_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GrowthForm",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="growthform_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="growthform_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "growth forms",
                "db_table": "growth_form",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="FishSizeBin",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("val", models.CharField(max_length=100)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishsizebin_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishsizebin_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FishSize",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                ("val", models.FloatField()),
                ("min_val", models.FloatField(blank=True, null=True)),
                ("max_val", models.FloatField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishsize_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "fish_bin_size",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.FishSizeBin"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishsize_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FishGroupTrophic",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishgrouptrophic_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishgrouptrophic_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name": "fish trophic group",
                "db_table": "fish_group_trophic",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="FishGroupSize",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishgroupsize_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishgroupsize_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name": "fish group size",
                "db_table": "fish_group_size",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="FishGroupFunction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishgroupfunction_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishgroupfunction_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name": "fish functional group",
                "db_table": "fish_group_function",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="FishBeltTransect",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True)),
                ("collect_record_id", models.UUIDField(blank=True, null=True)),
                ("sample_time", models.TimeField(blank=True, null=True)),
                (
                    "depth",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(40),
                        ],
                        verbose_name="depth (m)",
                    ),
                ),
                (
                    "len_surveyed",
                    models.DecimalField(
                        decimal_places=1, max_digits=4, verbose_name="transect length surveyed (m)"
                    ),
                ),
                ("number", models.PositiveSmallIntegerField(default=1)),
                ("label", models.CharField(blank=True, max_length=50)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishbelttransect_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "current",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Current",
                    ),
                ),
                (
                    "reef_slope",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.ReefSlope",
                    ),
                ),
                (
                    "relative_depth",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.RelativeDepth",
                    ),
                ),
                (
                    "sample_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.SampleEvent"
                    ),
                ),
                (
                    "size_bin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.FishSizeBin"
                    ),
                ),
                (
                    "tide",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Tide",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fishbelttransect_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "visibility",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Visibility",
                    ),
                ),
                (
                    "width",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="api.BeltTransectWidth",
                        verbose_name="width (m)",
                    ),
                ),
            ],
            options={
                "verbose_name": "fish belt transect",
                "db_table": "transect_belt_fish",
            },
        ),
        migrations.AddField(
            model_name="fishattribute",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="fishattribute_created_by",
                to="api.Profile",
            ),
        ),
        migrations.AddField(
            model_name="fishattribute",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="fishattribute_updated_by",
                to="api.Profile",
            ),
        ),
        migrations.AddField(
            model_name="current",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="current_created_by",
                to="api.Profile",
            ),
        ),
        migrations.AddField(
            model_name="current",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="current_updated_by",
                to="api.Profile",
            ),
        ),
        migrations.AddField(
            model_name="country",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="country_created_by",
                to="api.Profile",
            ),
        ),
        migrations.AddField(
            model_name="country",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="country_updated_by",
                to="api.Profile",
            ),
        ),
        migrations.CreateModel(
            name="CollectRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "data",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, encoder=rest_framework.utils.encoders.JSONEncoder, null=True
                    ),
                ),
                (
                    "validations",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, encoder=rest_framework.utils.encoders.JSONEncoder, null=True
                    ),
                ),
                (
                    "stage",
                    models.PositiveIntegerField(
                        blank=True,
                        choices=[
                            (3, "Saving"),
                            (5, "Saved"),
                            (10, "Validating"),
                            (15, "Validated"),
                            (20, "Submitting"),
                            (25, "Submitted"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="collectrecord_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collect_records",
                        to="api.Profile",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collect_records",
                        to="api.Project",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="collectrecord_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BenthicTransect",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True)),
                ("collect_record_id", models.UUIDField(blank=True, null=True)),
                ("sample_time", models.TimeField(blank=True, null=True)),
                (
                    "depth",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(40),
                        ],
                        verbose_name="depth (m)",
                    ),
                ),
                (
                    "len_surveyed",
                    models.DecimalField(
                        decimal_places=1, max_digits=4, verbose_name="transect length surveyed (m)"
                    ),
                ),
                ("number", models.PositiveSmallIntegerField(default=1)),
                ("label", models.CharField(blank=True, max_length=50)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="benthictransect_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "current",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Current",
                    ),
                ),
                (
                    "reef_slope",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.ReefSlope",
                    ),
                ),
                (
                    "relative_depth",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.RelativeDepth",
                    ),
                ),
                (
                    "sample_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.SampleEvent"
                    ),
                ),
                (
                    "tide",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Tide",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="benthictransect_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "visibility",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Visibility",
                    ),
                ),
            ],
            options={
                "db_table": "transect_benthic",
            },
        ),
        migrations.CreateModel(
            name="BenthicLifeHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="benthiclifehistory_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="benthiclifehistory_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "benthic life histories",
                "db_table": "benthic_lifehistory",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="BenthicAttribute",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "superuser approved"), (10, "proposed")], default=10
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="benthicattribute_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "life_history",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.BenthicLifeHistory",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="api.BenthicAttribute",
                    ),
                ),
                ("regions", models.ManyToManyField(blank=True, to="api.Region")),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="benthicattribute_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "benthic_attribute",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="belttransectwidth",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="belttransectwidth_created_by",
                to="api.Profile",
            ),
        ),
        migrations.AddField(
            model_name="belttransectwidth",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="belttransectwidth_updated_by",
                to="api.Profile",
            ),
        ),
        migrations.CreateModel(
            name="AuditRecord",
            fields=[
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "event_type",
                    models.IntegerField(choices=[(1, "Submit Record"), (2, "Edit Record")]),
                ),
                ("event_on", models.DateTimeField(auto_now_add=True)),
                ("model", models.CharField(max_length=100)),
                ("record_id", models.UUIDField(db_index=True)),
                (
                    "event_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProjectProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.PositiveSmallIntegerField(
                        choices=[(90, "admin"), (50, "collector"), (10, "read-only")]
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="projectprofile_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        to="api.Profile",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profiles",
                        to="api.Project",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="projectprofile_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "project_profile",
                "ordering": ("project", "profile"),
                "unique_together": {("project", "profile")},
            },
        ),
        migrations.CreateModel(
            name="Observer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("rank", models.PositiveSmallIntegerField(default=1)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="observer_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.Profile"
                    ),
                ),
                (
                    "transectmethod",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="observers",
                        to="api.TransectMethod",
                        verbose_name="transect method",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="observer_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "observer",
                "unique_together": {("transectmethod", "profile")},
            },
        ),
        migrations.CreateModel(
            name="ObsColoniesBleached",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                (
                    "count_normal",
                    models.PositiveSmallIntegerField(default=0, verbose_name="normal"),
                ),
                ("count_pale", models.PositiveSmallIntegerField(default=0, verbose_name="pale")),
                (
                    "count_20",
                    models.PositiveSmallIntegerField(default=0, verbose_name="0-20% bleached"),
                ),
                (
                    "count_50",
                    models.PositiveSmallIntegerField(default=0, verbose_name="20-50% bleached"),
                ),
                (
                    "count_80",
                    models.PositiveSmallIntegerField(default=0, verbose_name="50-80% bleached"),
                ),
                (
                    "count_100",
                    models.PositiveSmallIntegerField(default=0, verbose_name="80-100% bleached"),
                ),
                (
                    "count_dead",
                    models.PositiveSmallIntegerField(default=0, verbose_name="recently dead"),
                ),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.BenthicAttribute"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obscoloniesbleached_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "growth_form",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.GrowthForm",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obscoloniesbleached_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "bleachingquadratcollection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.BleachingQuadratCollection",
                    ),
                ),
            ],
            options={
                "verbose_name": "bleaching quadrat collection colonies bleached observation",
                "db_table": "obs_colonies_bleached",
                "ordering": ["created_on"],
            },
        ),
        migrations.CreateModel(
            name="ObsBenthicLIT",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("length", models.PositiveSmallIntegerField(verbose_name="length (cm)")),
                (
                    "include",
                    models.BooleanField(
                        default=True, verbose_name="include observation in aggregations/analyses?"
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.BenthicAttribute"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsbenthiclit_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "growth_form",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.GrowthForm",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsbenthiclit_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "benthiclit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="obsbenthiclit_set",
                        to="api.BenthicLIT",
                    ),
                ),
            ],
            options={
                "verbose_name": "benthic LIT observation",
                "db_table": "obs_benthiclit",
                "ordering": ["created_on"],
            },
        ),
        migrations.CreateModel(
            name="ObsBeltFish",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                (
                    "size",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="size (cm)",
                    ),
                ),
                ("count", models.PositiveIntegerField(default=1)),
                (
                    "include",
                    models.BooleanField(
                        default=True, verbose_name="include observation in aggregations/analyses?"
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsbeltfish_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "fish_attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.FishAttribute"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsbeltfish_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "beltfish",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="beltfish_observations",
                        to="api.BeltFish",
                    ),
                ),
            ],
            options={
                "verbose_name": "fish belt transect observation",
                "db_table": "obs_transectbeltfish",
                "ordering": ["created_on"],
            },
        ),
        migrations.CreateModel(
            name="MPAZone",
            fields=[
                (
                    "management_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.Management",
                    ),
                ),
                (
                    "mpa",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mpa_zones",
                        to="api.MPA",
                    ),
                ),
            ],
            options={
                "db_table": "mpa_zone",
            },
            bases=("api.management",),
        ),
        migrations.CreateModel(
            name="HabitatComplexity",
            fields=[
                (
                    "transectmethod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.TransectMethod",
                    ),
                ),
                (
                    "interval_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="interval size (m)",
                    ),
                ),
                (
                    "transect",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="habitatcomplexity_method",
                        to="api.BenthicTransect",
                        verbose_name="benthic transect",
                    ),
                ),
            ],
            options={
                "verbose_name": "habitat complexity transect",
                "verbose_name_plural": "habitat complexity transect observations",
                "db_table": "transectmethod_habitatcomplexity",
            },
            bases=("api.transectmethod",),
        ),
        migrations.CreateModel(
            name="FishSpecies",
            fields=[
                (
                    "fishattribute_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.FishAttribute",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "biomass_constant_a",
                    models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True),
                ),
                (
                    "biomass_constant_b",
                    models.DecimalField(blank=True, decimal_places=6, max_digits=7, null=True),
                ),
                (
                    "biomass_constant_c",
                    models.DecimalField(
                        blank=True, decimal_places=6, default=1, max_digits=7, null=True
                    ),
                ),
                (
                    "vulnerability",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_length",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(2000),
                        ],
                        verbose_name="maximum length (cm)",
                    ),
                ),
                (
                    "trophic_level",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "max_length_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("fork length", "fork length"),
                            ("standard length", "standard length"),
                            ("total length", "total length"),
                            ("wing diameter", "wing diameter"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "climate_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=9,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "functional_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.FishGroupFunction",
                    ),
                ),
                (
                    "genus",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.FishGenus"
                    ),
                ),
                (
                    "group_size",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.FishGroupSize",
                    ),
                ),
                ("regions", models.ManyToManyField(blank=True, to="api.Region")),
                (
                    "trophic_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.FishGroupTrophic",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "fish species",
                "db_table": "fish_species",
                "ordering": ("genus", "name"),
            },
            bases=("api.fishattribute",),
        ),
        migrations.CreateModel(
            name="FishGroupingRelationship",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="grouping_attribute",
                        to="api.FishAttribute",
                    ),
                ),
                (
                    "grouping",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attribute_grouping",
                        to="api.FishGrouping",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="fishgrouping",
            name="regions",
            field=models.ManyToManyField(blank=True, to="api.Region"),
        ),
        migrations.CreateModel(
            name="Covariate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("aca_benthic", "Benthic_Allen Coral Atlas"),
                            ("aca_geomorphic", "Geomorphic_Allen Coral Atlas"),
                            ("beyer_score", "50 Reefs score_Beyer"),
                            ("beyer_scorecn", "50 Reefs connectivity_Beyer"),
                            ("beyer_scorecy", "50 Reefs cyclones_Beyer"),
                            ("beyer_scorepfc", "50 Reefs thermal future_Beyer"),
                            ("beyer_scoreth", "50 Reefs thermal history_Beyer"),
                            ("beyer_scoretr", "50 Reefs thermal recent_Beyer"),
                            ("andrello_grav_nc", "Market gravity_Andrello"),
                            ("andrello_sediment", "Sediment_Andrello"),
                            ("andrello_nutrient", "Nutrient_Andrello"),
                            ("andrello_pop_count", "Human population_Andrello"),
                            ("andrello_num_ports", "Number of ports_Andrello"),
                            ("andrello_reef_value", "Tourism value_Andrello"),
                            ("andrello_cumul_score", "Cumulative local pressure_Andrello"),
                        ],
                        max_length=100,
                    ),
                ),
                ("datestamp", models.DateField()),
                ("requested_datestamp", models.DateField()),
                ("value", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="covariate_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="covariates",
                        to="api.Site",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="covariate_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "unique_together": {("site", "name")},
            },
        ),
        migrations.AddField(
            model_name="bleachingquadratcollection",
            name="quadrat",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bleachingquadratcollection_method",
                to="api.QuadratCollection",
                verbose_name="bleaching quadrat collection",
            ),
        ),
        migrations.CreateModel(
            name="BenthicPIT",
            fields=[
                (
                    "transectmethod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.TransectMethod",
                    ),
                ),
                (
                    "interval_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="interval size (m)",
                    ),
                ),
                (
                    "interval_start",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        max_digits=4,
                        verbose_name="interval start (m)",
                    ),
                ),
                (
                    "transect",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="benthicpit_method",
                        to="api.BenthicTransect",
                        verbose_name="benthic transect",
                    ),
                ),
            ],
            options={
                "verbose_name": "benthic PIT",
                "verbose_name_plural": "benthic PIT observations",
                "db_table": "transectmethod_benthicpit",
            },
            bases=("api.transectmethod",),
        ),
        migrations.CreateModel(
            name="BenthicPhotoQuadratTransect",
            fields=[
                (
                    "transectmethod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.TransectMethod",
                    ),
                ),
                (
                    "quadrat_transect",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="benthic_photo_quadrat_transect_method",
                        to="api.QuadratTransect",
                        verbose_name="benthic photo quadrat transect",
                    ),
                ),
            ],
            options={
                "verbose_name": "benthic photo quadrat transect",
                "verbose_name_plural": "benthic photo quadrat transects",
                "db_table": "transectmethod_benthicpqt",
            },
            bases=("api.transectmethod",),
        ),
        migrations.AddField(
            model_name="benthiclit",
            name="transect",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="benthiclit_method",
                to="api.BenthicTransect",
                verbose_name="benthic transect",
            ),
        ),
        migrations.CreateModel(
            name="BeltTransectWidthCondition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "operator",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("==", "=="),
                            ("!=", "!="),
                            ("<", "<"),
                            ("<=", "<="),
                            (">", ">"),
                            (">=", ">="),
                        ],
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="fish size (cm)",
                    ),
                ),
                ("val", models.PositiveSmallIntegerField()),
                (
                    "belttransectwidth",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="conditions",
                        to="api.BeltTransectWidth",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="belttransectwidthcondition_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="belttransectwidthcondition_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "unique_together": {("belttransectwidth", "operator", "size")},
            },
        ),
        migrations.AddField(
            model_name="beltfish",
            name="transect",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="beltfish_method",
                to="api.FishBeltTransect",
                verbose_name="fish belt transect",
            ),
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("user_id", models.CharField(max_length=255, unique=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="authuser_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authusers",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="authuser_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "authuser",
                "unique_together": {("profile", "user_id")},
            },
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("client_id", models.CharField(max_length=100, unique=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="application_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registered_apps",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="application_updated_by",
                        to="api.Profile",
                    ),
                ),
            ],
            options={
                "db_table": "applications",
                "unique_together": {("profile", "client_id")},
            },
        ),
        migrations.CreateModel(
            name="ObsQuadratBenthicPercent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("quadrat_number", models.PositiveSmallIntegerField(verbose_name="quadrat number")),
                (
                    "percent_hard",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="hard coral, % cover",
                    ),
                ),
                (
                    "percent_soft",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="soft coral, % cover",
                    ),
                ),
                (
                    "percent_algae",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="macroalgae, % cover",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsquadratbenthicpercent_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsquadratbenthicpercent_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "bleachingquadratcollection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.BleachingQuadratCollection",
                    ),
                ),
            ],
            options={
                "verbose_name": "bleaching quadrat collection percent benthic cover observation",
                "db_table": "obs_quadrat_benthic_percent",
                "ordering": ["created_on"],
                "unique_together": {("bleachingquadratcollection", "quadrat_number")},
            },
        ),
        migrations.CreateModel(
            name="ObsHabitatComplexity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("interval", models.DecimalField(decimal_places=2, max_digits=7)),
                (
                    "include",
                    models.BooleanField(
                        default=True, verbose_name="include observation in aggregations/analyses?"
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obshabitatcomplexity_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "score",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.HabitatComplexityScore"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obshabitatcomplexity_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "habitatcomplexity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="habitatcomplexity_set",
                        to="api.HabitatComplexity",
                    ),
                ),
            ],
            options={
                "verbose_name": "habitat complexity transect observation",
                "db_table": "obs_habitatcomplexity",
                "ordering": ["interval"],
                "unique_together": {("habitatcomplexity", "interval")},
            },
        ),
        migrations.CreateModel(
            name="ObsBenthicPIT",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("interval", models.DecimalField(decimal_places=2, max_digits=7)),
                (
                    "include",
                    models.BooleanField(
                        default=True, verbose_name="include observation in aggregations/analyses?"
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.BenthicAttribute"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsbenthicpit_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "growth_form",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.GrowthForm",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsbenthicpit_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "benthicpit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="obsbenthicpit_set",
                        to="api.BenthicPIT",
                    ),
                ),
            ],
            options={
                "verbose_name": "benthic PIT observation",
                "db_table": "obs_benthicpit",
                "ordering": ["interval"],
                "unique_together": {("benthicpit", "interval")},
            },
        ),
        migrations.CreateModel(
            name="ObsBenthicPhotoQuadrat",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("quadrat_number", models.PositiveSmallIntegerField(verbose_name="quadrat number")),
                (
                    "num_points",
                    models.PositiveSmallIntegerField(default=0, verbose_name="number of points"),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.BenthicAttribute"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsbenthicphotoquadrat_created_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "growth_form",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.GrowthForm",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="obsbenthicphotoquadrat_updated_by",
                        to="api.Profile",
                    ),
                ),
                (
                    "benthic_photo_quadrat_transect",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.BenthicPhotoQuadratTransect",
                    ),
                ),
            ],
            options={
                "verbose_name": "benthic photo quadrat transect observation",
                "db_table": "obs_benthic_photo_quadrat",
                "ordering": ["created_on"],
                "unique_together": {
                    ("benthic_photo_quadrat_transect", "quadrat_number", "attribute", "growth_form")
                },
            },
        ),
    ]
