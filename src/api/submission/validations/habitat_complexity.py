from .base import (
    FIELD_LEVEL,
    LIST_VALIDATION_TYPE,
    RECORD_LEVEL,
    ROW_LEVEL,
    VALUE_VALIDATION_TYPE,
    Validation,
)
from .validators import (
    AllEqualValidator,
    BenthicIntervalObservationCountValidator,
    DepthValidator,
    DrySubmitValidator,
    DuplicateValidator,
    IntervalSizeValidator,
    LenSurveyedValidator,
    ListRequiredValidator,
    ListScoreValidator,
    ManagementRuleValidator,
    RequiredValidator,
    SampleDateValidator,
    SampleTimeValidator,
    UniqueBenthicTransectValidator,
    UniqueManagementValidator,
    UniqueSiteValidator,
)

habcomp_validations = [
    Validation(
        validator=RequiredValidator(
            path="data.sample_event.site",
        ),
        paths=["data.sample_event.site"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=RequiredValidator(
            path="data.sample_event.management",
        ),
        paths=["data.sample_event.management"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=RequiredValidator(
            path="data.sample_event.sample_date",
        ),
        paths=["data.sample_event.sample_date"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=SampleDateValidator(
            sample_date_path="data.sample_event.sample_date",
            sample_time_path="data.benthic_transect.sample_time",
            site_path="data.sample_event.site",
        ),
        paths=["data.sample_event.sample_date"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=SampleTimeValidator(
            sample_time_path="data.benthic_transect.sample_time",
        ),
        paths=["data.benthic_transect.sample_time"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=UniqueSiteValidator(
            site_path="data.sample_event.site",
        ),
        paths=["data.sample_event.site"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=UniqueManagementValidator(
            management_path="data.sample_event.management",
            site_path="data.sample_event.site",
        ),
        paths=["data.sample_event.management"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=ManagementRuleValidator(
            management_path="data.sample_event.management",
        ),
        paths=["data.sample_event.management"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=RequiredValidator(
            path="data.benthic_transect.number",
        ),
        paths=["data.benthic_transect.number"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=RequiredValidator(
            path="data.benthic_transect.depth",
        ),
        paths=["data.benthic_transect.depth"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=DepthValidator(depth_path="data.benthic_transect.depth"),
        paths=["data.benthic_transect.depth"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=LenSurveyedValidator(
            len_surveyed_path="data.benthic_transect.len_surveyed",
        ),
        paths=["data.benthic_transect.len_surveyed"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=RequiredValidator(
            path="data.interval_size",
        ),
        paths=["data.interval_size"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=IntervalSizeValidator(
            interval_size_path="data.interval_size",
        ),
        paths=["data.interval_size"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=RequiredValidator(path="data.observers"),
        paths=["data.observers"],
        validation_level=FIELD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=UniqueBenthicTransectValidator(
            protocol_path="data.protocol",
            site_path="data.sample_event.site",
            management_path="data.sample_event.management",
            sample_date_path="data.sample_event.sample_date",
            number_path="data.benthic_transect.number",
            label_path="data.benthic_transect.label",
            depth_path="data.benthic_transect.depth",
            relative_depth_path="data.benthic_transect.relative_depth",
            observers_path="data.observers",
        ),
        paths=[
            "data.sample_event.site",
            "data.sample_event.management",
            "data.sample_event.sample_date",
            "data.benthic_transect.number",
            "data.benthic_transect.label",
            "data.benthic_transect.depth",
            "data.benthic_transect.relative_depth",
        ],
        validation_level=RECORD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=BenthicIntervalObservationCountValidator(
            len_surveyed_path="data.benthic_transect.len_surveyed",
            interval_size_path="data.interval_size",
            observations_path="data.obs_habitat_complexities",
        ),
        paths=["data.obs_habitat_complexities"],
        validation_level=RECORD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=ListRequiredValidator(
            list_path="data.obs_habitat_complexities",
            path="interval",
            name_prefix="interval",
            unique_identifier_label="observation_id",
        ),
        paths=["data.obs_habitat_complexities"],
        validation_level=ROW_LEVEL,
        validation_type=LIST_VALIDATION_TYPE,
    ),
    Validation(
        validator=ListRequiredValidator(
            list_path="data.obs_habitat_complexities",
            path="score",
            name_prefix="score",
            unique_identifier_label="observation_id",
        ),
        paths=["data.obs_habitat_complexities"],
        validation_level=ROW_LEVEL,
        validation_type=LIST_VALIDATION_TYPE,
    ),
    Validation(
        validator=ListScoreValidator(
            observations_path="data.obs_habitat_complexities",
            score_path="score",
            name_prefix="score",
            unique_identifier_label="observation_id",
        ),
        paths=["data.obs_habitat_complexities"],
        validation_level=ROW_LEVEL,
        validation_type=LIST_VALIDATION_TYPE,
    ),
    Validation(
        validator=AllEqualValidator(path="data.obs_habitat_complexities", ignore_keys=["id"]),
        paths=["data.obs_habitat_complexities"],
        validation_level=RECORD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=DuplicateValidator(
            list_path="data.obs_habitat_complexities",
            key_paths=["interval"],
        ),
        paths=["data.obs_habitat_complexities"],
        validation_level=RECORD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
    ),
    Validation(
        validator=DrySubmitValidator(),
        paths=["__all__"],
        validation_level=RECORD_LEVEL,
        validation_type=VALUE_VALIDATION_TYPE,
        requires_instance=True,
        delay_validation=True,
    ),
]
